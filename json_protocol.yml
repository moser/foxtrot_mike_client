Plane:
  id: String
  registration: String
  make: String
  competition_sign: String
  default_launch_method: String
  has_engine: Boolean
  can_fly_without_engine: Boolean
  selflaunching: Boolean
  can_tow: Boolean
  can_be_towed: Boolean
  can_be_wire_launched: Boolean
  default_engine_duration_to_duration: Boolean
  disabled: Boolean
  legal_plane_class_id:
    type: Int
    repository: AllLegalPlaneClasses
  group_id:
    type: Int
    repository: AllGroups
Person:
  id: String
  firstname: String
  lastname: String
  group_id:
    type: Int
    repository: AllGroups
  _extra:
    update: "      local.licenseLevels = remote.licenseLevels"
    unmarshall: '
      res.licenseLevels = Map[Int, Int]()\n
      (value \ "licenses").extract[List[JValue]].foreach((license) => {\n
        val levelNr = (license \ "level").extract[String] match {\n
          case "instructor" => 0\n
          case "normal" => 1\n
          case "trainee" => 2\n
        }\n
        (license \ "legal_plane_class_ids").extract[List[JValue]].foreach((id) => {\n
          val classId = id.extract[Int]\n
          res.licenseLevels = res.licenseLevels + (classId -> Math.min(levelNr, res.licenseLevels.getOrElse(classId, levelNr)))\n
        })\n
      })'
WireLauncher:
  id: String
  registration: String
Group:
  id: Int
  name: String
LegalPlaneClass:
  id: Int
  name: String
CostHint:
  id: Int
  name: String
Airfield:
  id: String
  name: String
  registration: String
